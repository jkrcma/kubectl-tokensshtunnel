#!/bin/bash

load_linux() {
    EXPIRE_TOKEN="$(date -u --date="+1 hour" +"%Y-%m-%dT%H:%M:%SZ")"
}

load_mac() {
    EXPIRE_TOKEN="$(date -u -v+1H -j -f "%Y-%m-%dT%H:%M:%SZ" "$(date -u +%Y-%m-%dT%H:%M:%SZ)" +"%Y-%m-%dT%H:%M:%SZ")"
}

MAX_DURATION="3600"
TMP_CRED="$HOME/.kube/cache/ktst"
REMOTE_KUBE_CONFIG="/etc/rancher/k3s/k3s.yaml"
SSH_TUNNEL=""

while getopts 'd:t:c:k:L:sn' OPT; do
  case $OPT in
    c)  SSH_COMMAND=$OPTARG;;
    k)  REMOTE_KUBE_CONFIG=$OPTARG;;
    L)  SSH_TUNNEL=$OPTARG;;
    n)  SSH_NEXTHOP="true";;
    s)  ADD_SUDO="true";;
    t)  TMP_CRED=$OPTARG;;
    d)  MAX_DURATION=$OPTARG;;
    h)  JELP="yes";;
    *)  JELP="yes";;
  esac
done

shift $(($OPTIND - 1))

HELP="
    usage: $0 -c <ssh command>

    Options:
    -c <ssh command>      Set the SSH command to use.
    -k <kube config>      Set the remote kube config file (default: /etc/rancher/k3s/k3s.yaml).
    -L <ssh tunnel>       Set the SSH tunnel configuration (format: [<local_bind>:]<local_port>:<remote_host>:<remote_port>).
    -n                    Hop to <remote_host> to fetch the kube config file.
    -s                    Add 'sudo' to the SSH command.
    -t <tmp dir>          Set the location to store the cached credentials.
    -d <seconds>          Set the duration for which the tunnel will be available. (default: 3600)
    -h                    Show this help message.
"

if [ "$JELP" = "yes" ] || [ -z "$SSH_COMMAND" ]; then
  echo "$HELP"
  exit 1
fi

mkdir -p $TMP_CRED 2>/dev/null
if [ ! -d $TMP_CRED ];
then
    echo "WTF: TMP_CRED: $TMP_CRED"
    exit 1
fi

OS=$(uname -s | tr '[:upper:]' '[:lower:]')
case "${OS}" in
    linux*)     load_linux;;
    darwin*)    load_mac;;
    *)          echo "error retrieving arch"; exit 1;;
esac

SSH_COMMAND_HOP=""
if [ -z "$ADD_SUDO" ];
then
    SUDO_CMD=" "
else
    SUDO_CMD="sudo"
fi

TMP_CRED_FILE="$TMP_CRED/$(echo "${SSH_TUNNEL:-null}" | tr : .)"
# setup tunnel

if [ ! -z "${SSH_TUNNEL}" ];
then
    # 7443:127.0.0.1:6443
    # 127.0.0.1:7443:127.0.0.1:6443
    SEPARATORS=$(echo "${SSH_TUNNEL}" | sed 's/:/:\n/g' | wc -l)

    if [ $SEPARATORS -ge 3 ];
    then
        LISTEN=$(echo "${SSH_TUNNEL}" | rev | cut -f3- -d: | rev | sed 's/:/ /')
        [ ! -z "$SSH_NEXTHOP" ] && SSH_COMMAND_HOP="ssh $(echo "${SSH_TUNNEL}" | cut -f2 -d:)"

        nc -w 1 -z 127.0.0.1 $LISTEN >/dev/null 2>/dev/null

        if [ $? -ne 0 ];
        then
            # spin-up tunnel
            nohup $SSH_COMMAND -L "${SSH_TUNNEL}" "sleep ${MAX_DURATION}" >/dev/null >/dev/null 2>&1 &
            
            # refresh credentials
            rm -f $TMP_CRED_FILE
        fi

        if [ -f $TMP_CRED_FILE ];
        then
            cat $TMP_CRED_FILE
            exit 0
        fi 
    else
        echo "Error parsing SSH TUNNEL: $SSH_TUNNEL"
        exit 1
    fi
fi

GET_KUBECONFIG_CMD="$SSH_COMMAND \"$SSH_COMMAND_HOP $SUDO_CMD cat ${REMOTE_KUBE_CONFIG}\""

CCD_DATA="$(sh -c "$GET_KUBECONFIG_CMD" 2>/dev/null | grep client-certificate-data | awk '{ print $2 }' | base64 -d | awk '{ printf "%s\\n",$0 }')"
CKD_DATA="$(sh -c "$GET_KUBECONFIG_CMD" 2>/dev/null | grep client-key-data | awk '{ print $2 }' | base64 -d | awk '{ printf "%s\\n",$0 }')"

echo "{
    \"kind\":\"ExecCredential\",
    \"apiVersion\":\"client.authentication.k8s.io/v1beta1\",
    \"spec\":{
        \"interactive\":false
        },
    \"status\":{
        \"expirationTimestamp\":\"${EXPIRE_TOKEN}\",
        \"clientCertificateData\":\"${CCD_DATA}\",
        \"clientKeyData\":\"${CKD_DATA}\"
        }
    }" | tee $TMP_CRED_FILE

